---
name: Check if kernel target archive exists
  stat:
    path: "{{ kernel_build_dir }}/{{ kernel }}"
  register: stat_result_kernel
- name: Create rt-kernel directory
  ansible.builtin.file:
    path: "{{ kernel_build_dir }}"
    state: directory
    mode: '0755'
- name: add elrepo key
  shell: |
      dnf -y upgrade --refresh
      rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  become: yes
  ignore_errors: yes
- name: install kernel related tools
  shell: |
      dnf -y install https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm
      dnf -y groupinstall 'Development Tools'
      dnf -y install ncurses-devel openssl-devel elfutils-libelf-devel python3
      dnf -y install dwarves
  become: yes
- name: fetch kernel
  shell: |
     rm -rf {{ kernel }} || true
     curl -L -o "{{ kernel }}" "{{ kernel_url }}/{{ kernel }}"
  args:
     chdir: "{{ kernel_build_dir }}"
  when: not stat_result_kernel.stat.exists
- name: unarchive kernel
  shell: |
      tar xvf {{ kernel }}
  args:
     chdir: "{{ kernel_build_dir }}"
- name: exec mrproper
  shell: |
    make  O=~/build/kernel mrproper
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
- name: Create build directory
  ansible.builtin.file:
    path: "~/build/kernel/"
    state: directory
    mode: '0755'
- name: copy kernel config into place
  template:
    src: config.j2
    dest: "~/build/kernel/.config"
- name: exec mrproper
  shell: |
    make  O=~/build/kernel mrproper
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
- name: add trusted keys & extraversion name
  shell: |
    sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' ~/build/kernel/.config
    sed  -i 's/^EXTRAVERSION.*/EXTRAVERSION = -custom/'  Makefile
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
- name: build kernel
  shell: |
    make O=~/build/kernel kernelversion
    make -j4  O=~/build/kernel
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
- name: build modules
  shell: |
    make O=~/build/kernel modules_install
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
  become: yes
- name: install kernel artifacts
  shell: |
    cp /home/jess/build/kernel/arch/x86/boot/bzImage /boot/vmlinuz-6.12.0-custom
   cp -v  ~/build/kernel/System.map /boot/System.map-6.12.0-custom
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
  become: yes
- name: execute kernel-install add
  shell: |
    kernel-install add 6.12.0-custom /boot/vmlinuz-6.12.0-custom
  args:
     chdir: "{{ kernel_build_dir }}{{ kernel_make_dir_name }}"
  become: yes
- name: reboot the machine
  reboot:
    reboot_timeout: 300
  become: true
